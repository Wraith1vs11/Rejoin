local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

local Window = Luna:CreateWindow({
    Name = "Porry | Full Moon Hopper",
    Subtitle = "Auto hop server cho Blox Fruits full moon.",
    LogoID = nil,
    LoadingEnabled = true,
    LoadingTitle = "Full Moon Hopper",
    LoadingSubtitle = "by Porry",
    ConfigSettings = {
        RootFolder = nil,
        ConfigFolder = "FullMoonHopper"
    },
    KeySystem = false,
    KeySettings = {}
})

local Tab = Window:CreateTab({
    Name = "Main",
    Icon = "moon",
    ImageSource = "Material",
    ShowTitle = true
})

local function scrapeAPI()
    while true do
        local success, response = pcall(function()
            return request({
                Url = "https://hostserver.porry.store/bloxfruit/bot/JobId/fullmoon",
                Method = "GET"
            })
        end)

        if success and response.Success then
            local data = game.HttpService:JSONDecode(response.Body)

            if data.Amount and data.Amount > 0 then
                local jobIds = {}

                for _, job in ipairs(data.JobId) do
                    for jobId, _ in pairs(job) do
                        table.insert(jobIds, jobId)
                    end
                end

                return jobIds
            end
        end

        wait(2)
    end
end

local jobIds = scrapeAPI()

local ChoosenID

local AutoHopButton = Tab:CreateButton({
    Name = "Auto Hop Server",
    Description = "Tự động nhảy server có full moon.",
    Callback = function()
        local co = coroutine.wrap(function()
            for _, jobId in ipairs(jobIds) do
                local success = false
                while not success do
                    local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                    if serverBrowser then
                        local successTeleport, message = pcall(function()
                            serverBrowser:InvokeServer("teleport", jobId)
                        end)
                        if successTeleport then
                            success = true
                            wait(5)
                        else
                            Luna:Notification({
                                Title = "Lỗi nhảy server",
                                Icon = "error",
                                ImageSource = "Material",
                                Content = "Lỗi khi nhảy server: " .. (message or "Không rõ nguyên nhân.")
                            })
                            wait(2)
                        end
                    else
                        Luna:Notification({
                            Title = "Lỗi",
                            Icon = "error",
                            ImageSource = "Material",
                            Content = "__ServerBrowser không tồn tại trong ReplicatedStorage."
                        })
                        return
                    end
                end
            end
        end)
        co()
    end
})

local HopToChosenButton = Tab:CreateButton({
    Name = "Hop To Choosen Server",
    Description = "Nhảy đến server đã chọn.",
    Callback = function()
        local success = false
        while not success do
            local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
            if serverBrowser then
                local successTeleport, message = pcall(function()
                    serverBrowser:InvokeServer("teleport", ChoosenID)
                end)
                if successTeleport then
                    success = true
                else
                    Luna:Notification({
                        Title = "Lỗi nhảy server",
                        Icon = "error",
                        ImageSource = "Material",
                        Content = "Lỗi khi nhảy server: " .. (message or "Không rõ nguyên nhân.")
                    })
                    wait(2)
                end
            else
                Luna:Notification({
                    Title = "Lỗi",
                    Icon = "error",
                    ImageSource = "Material",
                    Content = "__ServerBrowser không tồn tại trong ReplicatedStorage."
                })
                return
            end
        end
    end
})

local Dropdown = Tab:CreateDropdown({
    Name = "Servers",
    Description = nil,
    Options = jobIds and jobIds or {},
    CurrentOption = jobIds and jobIds[1] or "",
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Value)
        ChoosenID = Value
    end
})

local RefreshButton = Tab:CreateButton({
    Name = "Refresh Server List",
    Description = "Làm mới danh sách server.",
    Callback = function()
        jobIds = scrapeAPI()
        Dropdown:Set({Options = jobIds, CurrentOption = jobIds and jobIds[1] or ""})
    end
})

local Paragraph = Tab:CreateParagraph({
    Title = "Why did I made this?",
    Text = "To prevent skids from selling this at ridiculous prices.\nFor example: @_nguyenhoanggianam ( Thằng lồn skidder mất dạy ban bố m ).\nI'm happy to share the API source for free! Got questions? DM me on Discord: @_porry_"
})

Window:CreateHomeTab({
    SupportedExecutors = {},
    DiscordInvite = "R7S9tTh6Uy",
    Icon = 1
})
