local success, MacLib = pcall(loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt")))

if not success or not MacLib then
    error("Failed to load MacLib: " .. tostring(MacLib))
end

local Window = MacLib:Window({
    Title = "Porry | https://discord.gg/R7S9tTh6Uy",
    Subtitle = "Feel free to skid.",
    Size = UDim2.fromOffset(630, 360),
    DragStyle = 1,
    DisabledWindowControls = {},
    ShowUser Info = true,
    Keybind = Enum.KeyCode.RightControl,
    AcrylicBlur = true,
})

local globalSettings = {
    UIBlurToggle = Window:GlobalSetting({
        Name = "UI Blur",
        Default = Window:GetAcrylicBlurState(),
        Callback = function(bool)
            Window:SetAcrylicBlurState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                Lifetime = 5
            })
        end,
    }),
    NotificationToggler = Window:GlobalSetting({
        Name = "Notifications",
        Default = Window:GetNotificationsState(),
        Callback = function(bool)
            Window:SetNotificationsState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                Lifetime = 5
            })
        end,
    }),
    ShowUser Info = Window:GlobalSetting({
        Name = "Show User Info",
        Default = Window:GetUser InfoState(),
        Callback = function(bool)
            Window:SetUser InfoState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Showing" or "Redacted") .. " User Info",
                Lifetime = 5
            })
        end,
    })
}

local tabGroups = {
    TabGroup1 = Window:TabGroup()
}

local tabs = {
    Main = tabGroups.TabGroup1:Tab({ Name = "Full Moon", Image = "rbxassetid://18821914323" })
}

local sections = {
    MainSection1 = tabs.Main:Section({ Side = "Left" }),
    MainSection2 = tabs.Main:Section({ Side = "Right" })
}

local JobId, TS, ChoosenID
local function scrapeAPI()
    local success, response = pcall(function()
        return request({
            Url = "https://hostserver.porry.store/bloxfruit/bot/JobId/fullmoon",
            Method = "GET"
        })
    end)

    if success and response.Success then
        local data = game.HttpService:JSONDecode(response.Body)

        if data.Amount and data.Amount > 0 then
            local jobIds = {}

            for _, job in ipairs(data.JobId) do
                for jobId, _ in pairs(job) do
                    table.insert(jobIds, jobId)
                end
            end

            TS = tick()
            return jobIds
        end
    end

    return nil
end

sections.MainSection1:Header({
    Name = "Full Moon Hopper"
})

local jobIds = scrapeAPI()

sections.MainSection1:Button({
    Name = "Auto Hop Server",
    Callback = function()
        if not TS or tick() - TS > 100 then
            jobIds = scrapeAPI()
            if not jobIds then
                return Window:Notify({
                    Title = Window.Settings.Title,
                    Description = "Failed to scrape API.",
                    Lifetime = 5
                })
            end
        end

        local co = coroutine.wrap(function()
            for _, jobId in ipairs(jobIds) do
                local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                if serverBrowser then
                    serverBrowser:InvokeServer("teleport", jobId)
                else
                    Window:Notify({
                        Title = Window.Settings.Title,
                        Description = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                        Lifetime = 5
                    })
                end
                wait(5)
            end
        end)
        co()
    end
})

sections.MainSection1:Button({
    Name = "Hop To Choosen Server",
    Callback = function()
        if TS and tick() - TS <= 100 then
            Window:Dialog({
                Title = Window.Settings.Title,
                Description = "It seems like the JobID is outdated. Would you like to refresh the server list and then hop?",
                Buttons = {
                    { Name = "Yes, refresh and TP", Callback = function()
                        jobIds = scrapeAPI()
                        if jobIds then
                            ChoosenID = jobIds[math.random(#jobIds)]
                            local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                            if serverBrowser then
                                serverBrowser:InvokeServer("teleport", ChoosenID)
                            else
                                Window:Notify({
                                    Title = Window.Settings.Title,
                                    Description = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                                    Lifetime = 5
                                })
                            end
                        else
                            Window:Notify({
                                Title = Window.Settings.Title,
                                Description = "Failed to scrape API.",
                                Lifetime = 5
                            })
                        end
                    end },
                    { Name = "No, keep TP", Callback = function()
                        local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                        if serverBrowser then
                            serverBrowser:InvokeServer("teleport", ChoosenID)
                        else
                            Window:Notify({
                                Title = Window.Settings.Title,
                                Description = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                                Lifetime = 5
                                })
                        end
                    end }
                }
            })
        else
            local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
            if serverBrowser then
                serverBrowser:InvokeServer("teleport", ChoosenID)
            else
                Window:Notify({
                    Title = Window.Settings.Title,
                    Description = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                    Lifetime = 5
                })
            end
        end
    end
})

local Dropdown
sections.MainSection1:Button({
    Name = "Refresh Server List",
    Callback = function()
        jobIds = scrapeAPI()
        if jobIds then
            JobId = jobIds[math.random(1, #jobIds)]
            Dropdown:ClearOptions()
            Dropdown:InsertOptions(jobIds)
            Dropdown:UpdateSelection(JobId)
        else
            Window:Notify({
                Title = Window.Settings.Title,
                Description = "Failed to scrape API.",
                Lifetime = 5
            })
        end
    end
})

Dropdown = sections.MainSection1:Dropdown({
    Name = "Servers",
    Multi = false,
    Required = true,
    Options = jobIds and jobIds or {},
    Default = 1,
    Callback = function(Value)
        ChoosenID = Value
    end,
}, "Dropdown")

sections.MainSection2:Paragraph({
    Header = "Why did I made this?",
    Body = "To prevent skids from selling this at ridiculous prices."
})

sections.MainSection2:Label({
    Text = "For example: @_nguyenhoanggianam ( Thằng lồn skidder mất dạy ban bố m )."
})

sections.MainSection2:SubLabel({
    Text = "I'm happy to share the API source for free! Got questions? DM me on Discord: @_porry_"
})

MacLib:SetFolder("MacLib")

Window.onUnloaded(function()
    print("Unloaded!")
end)

tabs.Main:Select()
