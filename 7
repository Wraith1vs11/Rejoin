local Library = loadstring(game:HttpGet("https://github.com/1dontgiveaf/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/1dontgiveaf/Fluent/main/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/1dontgiveaf/Fluent/main/Addons/InterfaceManager.lua"))()

if not Library then
    error("Failed to load Fluent library.")
    return
end

local Window = Library:CreateWindow({
    Title = "Porry | https://discord.gg/R7S9tTh6Uy",
    SubTitle = "Feel free to skid.",
    TabWidth = 160,
    Size = UDim2.fromOffset(630, 360),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
})

if not Window then
    error("Failed to create Fluent window.")
    return
end

local Tabs = {
    Main = Window:AddTab({ Title = "Full Moon", Icon = "moon" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Library.Options

do
    Tabs.Main:AddParagraph({
        Title = "Full Moon Hopper",
        Content = "Auto hop server cho Blox Fruits full moon."
    })

    local ChoosenID
    local JobId, TS
    local function scrapeAPI()
        local success, response = pcall(function()
            return request({
                Url = "https://hostserver.porry.store/bloxfruit/bot/JobId/fullmoon",
                Method = "GET"
            })
        end)

        if success and response.Success then
            local data = game.HttpService:JSONDecode(response.Body)

            if data.Amount and data.Amount > 0 then
                local jobIds = {}

                for _, job in ipairs(data.JobId) do
                    for jobId, _ in pairs(job) do
                        table.insert(jobIds, jobId)
                    end
                end

                TS = tick()
                return jobIds
            end
        end

        return nil
    end

    local jobIds = scrapeAPI()

    Tabs.Main:AddButton({
        Title = "Auto Hop Server",
        Description = "Tự động nhảy server có full moon.",
        Callback = function()
            if not Window then return end
            if not TS or tick() - TS > 100 then
                jobIds = scrapeAPI()
                if not jobIds then
                    Window:Dialog({
                        Title = Window.Settings.Title,
                        Content = "Failed to scrape API.",
                        Buttons = {{ Title = "OK" }}
                    })
                    return
                end
            end

            local co = coroutine.wrap(function()
                for _, jobId in ipairs(jobIds) do
                    local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                    if serverBrowser then
                        serverBrowser:InvokeServer("teleport", jobId)
                    else
                        Window:Dialog({
                            Title = Window.Settings.Title,
                            Content = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                            Buttons = {{ Title = "OK" }}
                        })
                    end
                    wait(5)
                end
            end)
            co()
        end
    })

    Tabs.Main:AddButton({
        Title = "Hop To Choosen Server",
        Description = "Nhảy đến server đã chọn.",
        Callback = function()
            if not Window then return end
            if TS and tick() - TS <= 100 then
                Window:Dialog({
                    Title = Window.Settings.Title,
                    Content = "It seems like the JobID is outdated. Would you like to refresh the server list and then hop?",
                    Buttons = {
                        {
                            Title = "Yes, refresh and TP",
                            Callback = function()
                                if not Window then return end
                                jobIds = scrapeAPI()
                                if jobIds then
                                    ChoosenID = jobIds[math.random(#jobIds)]
                                    local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                                    if serverBrowser then
                                        serverBrowser:InvokeServer("teleport", ChoosenID)
                                    else
                                        Window:Dialog({
                                            Title = Window.Settings.Title,
                                            Content = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                                            Buttons = {{ Title = "OK" }}
                                        })
                                    end
                                else
                                    Window:Dialog({
                                        Title = Window.Settings.Title,
                                        Content = "Failed to scrape API.",
                                        Buttons = {{ Title = "OK" }}
                                    })
                                end
                            end
                        },
                        {
                            Title = "No, keep TP",
                            Callback = function()
                                if not Window then return end
                                local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                                if serverBrowser then
                                    serverBrowser:InvokeServer("teleport", ChoosenID)
                                else
                                    Window:Dialog({
                                        Title = Window.Settings.Title,
                                        Content = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                                        Buttons = {{ Title = "OK" }}
                                    })
                                end
                            end
                        }
                    }
                })
            else
                local serverBrowser = game:GetService("ReplicatedStorage"):FindFirstChild("__ServerBrowser")
                if serverBrowser then
                    serverBrowser:InvokeServer("teleport", ChoosenID)
                else
                    Window:Dialog({
                        Title = Window.Settings.Title,
                        Content = "__ServerBrowser không tồn tại trong ReplicatedStorage.",
                        Buttons = {{ Title = "OK" }}
                    })
                end
            end
        end
    })

    local Dropdown = Tabs.Main:AddDropdown("Servers", {
        Title = "Servers",
        Values = jobIds and jobIds or {},
        Multi = false,
        Default = 1,
        Callback = function(Value)
            ChoosenID = Value
        end
    })

    Tabs.Main:AddButton({
        Title = "Refresh Server List",
        Description = "Làm mới danh sách server.",
        Callback = function()
            if not Window then return end
            jobIds = scrapeAPI()
            if jobIds then
                JobId = jobIds[math.random(1, #jobIds)]
                Dropdown:SetValue(JobId)
                Dropdown.Values = jobIds
            else
                Window:Dialog({
                    Title = Window.Settings.Title,
                    Content = "Failed to scrape API.",
                    Buttons = {{ Title = "OK" }}
                })
            end
        end
    })

    Tabs.Main:AddParagraph({
        Title = "Why did I made this?",
        Content = "To prevent skids from selling this at ridiculous prices.\nFor example: @_nguyenhoanggianam ( Thằng lồn skidder mất dạy ban bố m ).\nI'm happy to share the API source for free! Got questions? DM me on Discord: @_porry_"
    })
end

SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Library:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
